// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Provider {
  id           String @id @default(cuid())
  providerId   String
  providerName String @map("provider_name")
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique @map("user_id")

  @@unique([providerId, providerName])
  @@index([userId])
  @@map("provider")
}

model User {
  id               String                 @id @default(uuid())
  name             String?
  email            String?                @unique
  image            String?
  provider         Provider?
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt() @map("updated_at")
  refreshToken     String?                @map("refresh_token")
  eventOrganized   Event[]
  eventParticapted UserParticipateEvent[]

  @@map("user")
}

model Event {
  id                String                 @id @default(uuid())
  title             String                 @db.VarChar(100)
  description       String                 @db.VarChar(500)
  image             String?
  location          String
  maximumAttendance Int?
  startDate         DateTime               @map("start_date")
  endDate           DateTime?              @map("end_date")
  createdAt         DateTime               @default(now()) @map("created_at")
  updatedAt         DateTime               @updatedAt() @map("updated_at")
  announcements     Announcement[]
  organizers        User[]
  participants      UserParticipateEvent[]
  form              Form?

  @@map("event")
}

model Form {
  event      Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String      @unique @map("event_id")
  formFields FormField[]

  @@index([eventId])
  @@map("form")
}

model FormField {
  Form    Form   @relation(fields: [eventId], references: [eventId])
  eventId String @unique
  label   String
  value   String

  @@index([eventId])
  @@map("form_field")
}

model UserParticipateEvent {
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String  @map("event_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  isArrived Boolean @default(false) @map("is_arrived")
  feedback  String? @db.VarChar(500)
  rating    Int

  @@id([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@map("user_participate_event")
}

model Announcement {
  id          Int
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String   @map("event_id")
  title       String   @db.VarChar(100)
  description String   @db.VarChar(500)
  type        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")

  @@id([id, eventId])
  @@index([eventId])
  @@map("announcement")
}
